generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int         @id @default(autoincrement())
  firstName    String      @db.VarChar(30)
  lastName     String      @db.VarChar(30)
  email        String      @unique @db.VarChar(30)
  password     String      @db.VarChar(100)
  refreshToken String?     @unique
  roleId       Int
  role         Role        @relation(fields: [roleId], references: [id])
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  userGroup    UserGroup[]
  userTest     UserTest[]
}

model UserGroup {
  id        Int      @id @default(autoincrement())
  userId    Int
  groupId   Int
  user      User     @relation(fields: [userId], references: [id])
  group     Group    @relation(fields: [groupId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Role {
  id   Int    @id @default(autoincrement())
  name String @unique @db.VarChar(30)
  user User[]
}

model Group {
  id        Int         @id @default(autoincrement())
  name      String      @unique @db.VarChar(30)
  schedule  Schedule[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  userGroup UserGroup[]
}

model Schedule {
  id        Int       @id @default(autoincrement())
  date      DateTime  @db.Date()
  time      DateTime  @db.Time()
  group     Group     @relation(fields: [groupId], references: [id])
  groupId   Int
  subject   Subject[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Subject {
  id         Int      @id @default(autoincrement())
  name       String   @unique
  schdule    Schedule @relation(fields: [scheduleId], references: [id])
  scheduleId Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  test       Test[]
}

model Test {
  id        Int    @id @default(autoincrement())
  name      String @unique
  startedDate DateTime @db.Date()
  startedAt DateTime @db.Time()
  finishedAt DateTime @db.Time()
  subjectId Int
  subject Subject @relation(fields: [subjectId], references: [id])
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  questions Question[]
  userTest  UserTest[]
}

model UserTest {
  id        Int      @id @default(autoincrement())
  userId    Int
  testId    Int
  user      User     @relation(fields: [userId], references: [id])
  test      Test     @relation(fields: [testId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Question {
  id            Int      @id @default(autoincrement())
  name          String   @db.VarChar(160)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  test          Test     @relation(fields: [testId], references: [id])
  testId        Int
  correctAnswer Int
  answers       Answer[]

}

model Answer {
  id         Int      @id @default(autoincrement())
  name       String   @db.VarChar(30)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  question   Question @relation(fields: [questionId], references: [id])
  questionId Int
}
