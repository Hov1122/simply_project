generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int         @id @default(autoincrement())
  firstName    String      @db.VarChar(30)
  lastName     String      @db.VarChar(30)
  email        String      @unique @db.VarChar(30)
  password     String      @db.VarChar(100)
  refreshToken String?     @unique
  roleId       Int
  role         Role        @relation(fields: [roleId], references: [id])
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  userGroup    UserGroup[]
  userTest     UserTest[]
}

model UserGroup {
  id        Int      @id @default(autoincrement())
  userId    Int
  groupId   Int
  user      User     @relation(fields: [userId], references: [id])
  group     Group    @relation(fields: [groupId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Role {
  id   Int    @id @default(autoincrement())
  name String @unique @db.VarChar(30)
  user User[]
}

model Group {
  id        Int         @id @default(autoincrement())
  name      String      @unique @db.VarChar(30)
  schedule  Schedule[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  userGroup UserGroup[]
}

model Schedule {
  id              Int               @id @default(autoincrement())
  day             Int
  group           Group             @relation(fields: [groupId], references: [id])
  groupId         Int
  scheduleSubject ScheduleSubject[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  @@unique([day, groupId])
}

model ScheduleSubject {
  id         Int      @id @default(autoincrement())
  time       DateTime @db.Time()
  scheduleId Int
  subjectId  Int
  subject    Subject  @relation(fields: [subjectId], references: [id])
  schedule   Schedule @relation(fields: [scheduleId], references: [id], onDelete: Cascade)

  @@unique([scheduleId, time])
}

model Subject {
  id              Int               @id @default(autoincrement())
  name            String            @unique
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  scheduleSubject ScheduleSubject[]
  test            Test[]
}

model Test {
  id           Int        @id @default(autoincrement())
  name         String     @unique
  subjectId    Int
  start        DateTime   @db.Timestamp()
  length       Int
  highestScore Int
  subject      Subject    @relation(fields: [subjectId], references: [id])
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  questions    Question[]
  userTest     UserTest[]
}

model UserTest {
  id        Int      @id @default(autoincrement())
  userId    Int
  testId    Int
  mark      Int      @default(0)
  user      User     @relation(fields: [userId], references: [id])
  test      Test     @relation(fields: [testId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, testId])
}

model Question {
  id            Int      @id @default(autoincrement())
  name          String   @db.VarChar(160)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  test          Test     @relation(fields: [testId], references: [id], onDelete: Cascade)
  testId        Int
  correctAnswer Int
  answers       Answer[]
}

model Answer {
  id         Int      @id @default(autoincrement())
  name       String   @db.VarChar(30)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId Int
}
